{"ast":null,"code":"import _defineProperty from \"e:\\\\Social\\\\socials\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { usersAPI } from '../Api/Api';\nconst FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SET_USERS';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\nlet initialState = {\n  users: [],\n  pageSize: 40,\n  totalUsersCount: 0,\n  currentPage: 1,\n  isFetching: true,\n  followingInProgress: []\n};\n\nconst usersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FOLLOW:\n      return _objectSpread({}, state, {\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return _objectSpread({}, u, {\n              followed: true\n            });\n          }\n\n          return u;\n        })\n      });\n\n    case UNFOLLOW:\n      return _objectSpread({}, state, {\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return _objectSpread({}, u, {\n              followed: false\n            });\n          }\n\n          return u;\n        })\n      });\n\n    case SET_USERS:\n      {\n        return _objectSpread({}, state, {\n          users: action.users\n        });\n      }\n\n    case SET_CURRENT_PAGE:\n      {\n        return _objectSpread({}, state, {\n          currentPage: action.currentPage\n        });\n      }\n\n    case SET_TOTAL_USERS_COUNT:\n      {\n        return _objectSpread({}, state, {\n          totalUsersCount: action.count\n        });\n      }\n\n    case TOGGLE_IS_FETCHING:\n      {\n        return _objectSpread({}, state, {\n          isFetching: action.isFetching\n        });\n      }\n\n    case TOGGLE_IS_FOLLOWING_PROGRESS:\n      {\n        return _objectSpread({}, state, {\n          followingInProgress: action.isFetching ? [...state.followingInProgress, action.userId] : state.followingInProgress.filter(id => id != action.userId)\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const followSuccess = userId => ({\n  type: FOLLOW,\n  userId\n});\nexport const unfollowSuccess = userId => ({\n  type: UNFOLLOW,\n  userId\n});\nexport const setUsers = users => ({\n  type: SET_USERS,\n  users\n});\nexport const setCurrentPage = currentPage => ({\n  type: SET_CURRENT_PAGE,\n  currentPage\n});\nexport const setTotalUsersCount = totalUsersCount => ({\n  type: SET_TOTAL_USERS_COUNT,\n  count: totalUsersCount\n});\nexport const toggleIsFetching = isFetching => ({\n  type: TOGGLE_IS_FETCHING,\n  isFetching\n});\nexport const toggleFollowingProgress = (isFetching, userId) => ({\n  type: TOGGLE_IS_FOLLOWING_PROGRESS,\n  isFetching,\n  userId\n});\nexport const requestUsers = (page, pageSize) => {\n  return async dispatch => {\n    dispatch(toggleIsFetching(true));\n    dispatch(setCurrentPage(page));\n    let data = await usersAPI.getUsers(page, pageSize);\n    dispatch(toggleIsFetching(false));\n    dispatch(setUsers(data.items));\n    dispatch(setTotalUsersCount(data.totalCount));\n  };\n};\n\nconst followUnfollowFlow = async (dispatch, userId, apiMethod, actionCreator) => {\n  dispatch(toggleFollowingProgress(true, userId));\n  let response = await apiMethod(userId);\n};\n\nexport const follow = userId => {\n  return async dispatch => {\n    dispatch(toggleFollowingProgress(true, userId));\n    let response = await usersAPI.follow(userId);\n\n    if (response.data.resultCode == 0) {\n      dispatch(followSuccess(userId));\n    }\n\n    dispatch(toggleFollowingProgress(false, userId));\n  };\n};\nexport const unfollow = userId => {\n  return async dispatch => {\n    dispatch(toggleFollowingProgress(true, userId));\n    let response = await usersAPI.unfollow(userId);\n\n    if (response.data.resultCode == 0) {\n      dispatch(unfollowSuccess(userId));\n    }\n\n    dispatch(toggleFollowingProgress(false, userId));\n  };\n};\nexport default usersReducer;","map":{"version":3,"sources":["e:/Social/socials/src/redux/users-reducer.js"],"names":["usersAPI","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","initialState","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","usersReducer","state","action","type","map","u","id","userId","followed","count","filter","followSuccess","unfollowSuccess","setUsers","setCurrentPage","setTotalUsersCount","toggleIsFetching","toggleFollowingProgress","requestUsers","page","dispatch","data","getUsers","items","totalCount","followUnfollowFlow","apiMethod","actionCreator","response","follow","resultCode","unfollow"],"mappings":"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","sourcesContent":["import {usersAPI} from '../Api/Api'\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\r\n\r\nlet initialState = {\r\n    users: [ ],\r\n    pageSize: 40,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: []\r\n};\r\n\r\nconst usersReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n            case FOLLOW:\r\n                return {\r\n                    ...state,\r\n                    users: state.users.map( u => {\r\n                        if (u.id === action.userId) {\r\n                            return {...u, followed: true}\r\n                        }\r\n                        return u;\r\n                    })\r\n                }\r\n            case UNFOLLOW:\r\n                return {\r\n                    ...state, \r\n                    users: state.users.map( u => {\r\n                        if(u.id === action.userId) {\r\n                            return {...u, followed: false}\r\n                        }\r\n                        return u;\r\n                    })\r\n                }\r\n            case SET_USERS: {\r\n                return{...state, users: action.users}\r\n            }\r\n            case SET_CURRENT_PAGE: {\r\n                return{...state, currentPage: action.currentPage}\r\n            }\r\n            case SET_TOTAL_USERS_COUNT: {\r\n                return{...state, totalUsersCount: action.count}\r\n            }\r\n            case TOGGLE_IS_FETCHING:{\r\n                return{...state, isFetching: action.isFetching}\r\n            }\r\n            case TOGGLE_IS_FOLLOWING_PROGRESS:{\r\n                return{\r\n                    ...state, \r\n                    followingInProgress: action.isFetching \r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n                }\r\n            }\r\n            default: return state;\r\n    }\r\n}\r\nexport const followSuccess = (userId) => ({type: FOLLOW, userId})\r\nexport const unfollowSuccess = (userId) => ({type: UNFOLLOW, userId})\r\nexport const setUsers = (users) => ({type: SET_USERS, users})\r\nexport const setCurrentPage = (currentPage) => ({type:SET_CURRENT_PAGE, currentPage})\r\nexport const setTotalUsersCount = (totalUsersCount) => ({type:SET_TOTAL_USERS_COUNT, count:totalUsersCount})\r\nexport const toggleIsFetching = (isFetching) => ({type:TOGGLE_IS_FETCHING, isFetching})\r\nexport const toggleFollowingProgress = (isFetching, userId) => ({type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId})\r\n\r\nexport const requestUsers = (page, pageSize) => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsFetching(true));\r\n        dispatch(setCurrentPage(page));\r\n\r\n        let data = await usersAPI.getUsers(page, pageSize);\r\n        dispatch(toggleIsFetching(false));\r\n        dispatch(setUsers(data.items));\r\n        dispatch(setTotalUsersCount(data.totalCount));\r\n    }\r\n}\r\n\r\nconst followUnfollowFlow = async(dispatch, userId, apiMethod, actionCreator) => {\r\n    dispatch(toggleFollowingProgress(true,userId));\r\n    let response = await apiMethod(userId);\r\n\r\n    \r\n}\r\n\r\nexport const follow = (userId) => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleFollowingProgress(true, userId));\r\n        let response = await usersAPI.follow(userId);\r\n            if (response.data.resultCode == 0) {\r\n                dispatch(followSuccess(userId))\r\n            }\r\n            dispatch(toggleFollowingProgress(false, userId));\r\n    }\r\n}\r\nexport const unfollow = (userId) => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleFollowingProgress(true, userId));\r\n        let response = await usersAPI.unfollow(userId);\r\n        if (response.data.resultCode == 0) {dispatch(unfollowSuccess(userId))}\r\n        dispatch(toggleFollowingProgress(false, userId));\r\n    }\r\n}\r\n\r\nexport default usersReducer;"]},"metadata":{},"sourceType":"module"}