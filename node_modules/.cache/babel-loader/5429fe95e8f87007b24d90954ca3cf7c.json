{"ast":null,"code":"import _defineProperty from \"e:\\\\Social\\\\socials\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { usersAPI, profileAPI } from '../Api/Api';\nconst ADD_POST = 'ADD-POST';\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\nconst SET_USER_CONTACTS = 'SET_USER_CONTACTS';\nconst SET_STATUS = 'SET_STATUS';\nlet initialState = {\n  posts: [{\n    id: 1,\n    message: \"Whatcha gonna do?\",\n    likesCount: 3\n  }, {\n    id: 2,\n    message: \"When shall we go?\",\n    likesCount: 1\n  }],\n  profile: null,\n  contacts: {},\n  lookingForAJob: true,\n  status: ''\n};\n\nconst profileReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST:\n      let newPost = {\n        id: 5,\n        message: action.newPostText,\n        likesCount: 0\n      };\n      return _objectSpread({}, state, {\n        posts: [...state.posts, newPost],\n        newPostText: ''\n      });\n\n    case SET_USER_PROFILE:\n      {\n        return _objectSpread({}, state, {\n          profile: action.profile\n        });\n      }\n\n    case SET_USER_CONTACTS:\n      {\n        return _objectSpread({}, state, {\n          contacts: action.contacts\n        });\n      }\n\n    case SET_STATUS:\n      {\n        return _objectSpread({}, state, {\n          status: action.status\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const addUserContacts = contacts => ({\n  type: SET_USER_CONTACTS,\n  contacts\n});\nexport const addPostActionCreator = newPostText => ({\n  type: ADD_POST,\n  newPostText\n});\nexport const setUserProfile = profile => ({\n  type: SET_USER_PROFILE,\n  profile\n});\nexport const setStatus = status => ({\n  type: SET_STATUS,\n  status\n});\nexport const getUserProfile = userId => dispatch => {\n  usersAPI.getProfile(userId).then(response => {\n    dispatch(setUserProfile(response.data));\n  });\n};\nexport const getStatus = userId => dispatch => {\n  profileAPI.getStatus(userId).then(response => {\n    dispatch(setStatus(response.data));\n  });\n};\nexport const updateStatus = status => dispatch => {\n  profileAPI.updateStatus(status).then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(setStatus(status));\n    }\n  });\n};\nexport const updateNewPostTextActionCreator = text => ({\n  type: UPDATE_NEW_POST_TEXT,\n  newText: text\n});\nexport default profileReducer;","map":{"version":3,"sources":["e:/Social/socials/src/redux/profile-reducer.js"],"names":["usersAPI","profileAPI","ADD_POST","UPDATE_NEW_POST_TEXT","SET_USER_PROFILE","SET_USER_CONTACTS","SET_STATUS","initialState","posts","id","message","likesCount","profile","contacts","lookingForAJob","status","profileReducer","state","action","type","newPost","newPostText","addUserContacts","addPostActionCreator","setUserProfile","setStatus","getUserProfile","userId","dispatch","getProfile","then","response","data","getStatus","updateStatus","resultCode","updateNewPostTextActionCreator","text","newText"],"mappings":"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","sourcesContent":["import {usersAPI, profileAPI} from '../Api/Api';\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\nconst SET_USER_CONTACTS = 'SET_USER_CONTACTS';\r\nconst SET_STATUS = 'SET_STATUS'\r\n\r\nlet initialState = {\r\n    posts: [ \r\n            { id: 1, message: \"Whatcha gonna do?\", likesCount: 3 }, \r\n            { id: 2, message: \"When shall we go?\", likesCount: 1 } \r\n           ],\r\n    profile: null,\r\n    contacts: {},\r\n    lookingForAJob: true,\r\n    status:''\r\n};\r\n\r\nconst profileReducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case ADD_POST: \r\n            let newPost = {\r\n            id: 5,\r\n            message: action.newPostText,\r\n            likesCount: 0\r\n        };\r\n            return {\r\n                ...state,\r\n                posts:[...state.posts,newPost],\r\n                newPostText:''\r\n            };\r\n        \r\n        case SET_USER_PROFILE:{\r\n            return{...state, profile: action.profile}\r\n        }\r\n        case SET_USER_CONTACTS:{\r\n            return{...state,contacts: action.contacts}\r\n        }\r\n        case SET_STATUS:{\r\n            return{...state, status:action.status}\r\n        }\r\n        default: \r\n            return state;\r\n    }\r\n}\r\nexport const addUserContacts = (contacts) => ({type:SET_USER_CONTACTS, contacts})\r\nexport const addPostActionCreator = (newPostText) => ({type: ADD_POST, newPostText})\r\nexport const setUserProfile = (profile) => ({type: SET_USER_PROFILE, profile})\r\nexport const setStatus = (status) => ({type: SET_STATUS, status})\r\nexport const getUserProfile = (userId) => (dispatch) => {\r\n    usersAPI.getProfile(userId).then(response => {\r\n        dispatch(setUserProfile(response.data));\r\n    });\r\n}\r\nexport const getStatus = (userId) => (dispatch) => {\r\n    profileAPI.getStatus(userId).then(response => {\r\n        dispatch(setStatus(response.data));\r\n    });\r\n}\r\nexport const updateStatus = (status) => (dispatch) => {\r\n    profileAPI.updateStatus(status).then(response => {\r\n        if (response.data.resultCode === 0){\r\n        dispatch(setStatus(status));\r\n    }});\r\n}\r\nexport const updateNewPostTextActionCreator = (text) => ({type: UPDATE_NEW_POST_TEXT,newText: text})\r\n\r\nexport default profileReducer;"]},"metadata":{},"sourceType":"module"}