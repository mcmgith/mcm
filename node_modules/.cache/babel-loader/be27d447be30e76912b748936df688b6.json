{"ast":null,"code":"import _defineProperty from \"e:\\\\Social\\\\socials\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { usersAPI, profileAPI } from '../Api/Api';\nconst ADD_POST = 'ADD-POST';\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\nconst SET_USER_CONTACTS = 'SET_USER_CONTACTS';\nconst SET_STATUS = 'SET_STATUS';\nconst DELETE_POST = 'DELETE_POST';\nlet initialState = {\n  posts: [{\n    id: 1,\n    message: \"Whatcha gonna do?\",\n    likesCount: 3\n  }, {\n    id: 2,\n    message: \"When shall we go?\",\n    likesCount: 1\n  }],\n  profile: null,\n  contacts: {},\n  lookingForAJob: true,\n  status: ''\n};\n\nconst profileReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST:\n      let newPost = {\n        id: 5,\n        message: action.newPostText,\n        likesCount: 0\n      };\n      return _objectSpread({}, state, {\n        posts: [...state.posts, newPost],\n        newPostText: ' '\n      });\n\n    case SET_USER_PROFILE:\n      {\n        return _objectSpread({}, state, {\n          profile: action.profile\n        });\n      }\n\n    case SET_USER_CONTACTS:\n      {\n        return _objectSpread({}, state, {\n          contacts: action.contacts\n        });\n      }\n\n    case SET_STATUS:\n      {\n        return _objectSpread({}, state, {\n          status: action.status\n        });\n      }\n\n    case DELETE_POST:\n      {\n        return _objectSpread({}, state, {\n          posts: state.posts.filter(p => p.id != action.postId)\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const addUserContacts = contacts => ({\n  type: SET_USER_CONTACTS,\n  contacts\n});\nexport const addPostActionCreator = newPostText => ({\n  type: ADD_POST,\n  newPostText\n});\nexport const setUserProfile = profile => ({\n  type: SET_USER_PROFILE,\n  profile\n});\nexport const setStatus = status => ({\n  type: SET_STATUS,\n  status\n});\nexport const deletePost = postId => ({\n  type: DELETE_POST,\n  postId\n});\nexport const getUserProfile = userId => async dispatch => {\n  let response = await usersAPI.getProfile(userId);\n  dispatch(setUserProfile(response.data));\n};\nexport const getStatus = userId => dispatch => {\n  profileAPI.getStatus(userId);\n  dispatch(setStatus(response.data));\n};\nexport const updateStatus = status => dispatch => {\n  profileAPI.updateStatus(status).then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(setStatus(status));\n    }\n  });\n};\nexport default profileReducer;","map":{"version":3,"sources":["e:/Social/socials/src/redux/profile-reducer.js"],"names":["usersAPI","profileAPI","ADD_POST","SET_USER_PROFILE","SET_USER_CONTACTS","SET_STATUS","DELETE_POST","initialState","posts","id","message","likesCount","profile","contacts","lookingForAJob","status","profileReducer","state","action","type","newPost","newPostText","filter","p","postId","addUserContacts","addPostActionCreator","setUserProfile","setStatus","deletePost","getUserProfile","userId","dispatch","response","getProfile","data","getStatus","updateStatus","then","resultCode"],"mappings":"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","sourcesContent":["import {usersAPI, profileAPI} from '../Api/Api';\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\nconst SET_USER_CONTACTS = 'SET_USER_CONTACTS';\r\nconst SET_STATUS = 'SET_STATUS';\r\nconst DELETE_POST = 'DELETE_POST';\r\n\r\nlet initialState = {\r\n    posts: [ \r\n            { id: 1, message: \"Whatcha gonna do?\", likesCount: 3 }, \r\n            { id: 2, message: \"When shall we go?\", likesCount: 1 } \r\n           ],\r\n    profile: null,\r\n    contacts: {},\r\n    lookingForAJob: true,\r\n    status:''\r\n};\r\n\r\nconst profileReducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case ADD_POST: \r\n            let newPost = {\r\n            id: 5,\r\n            message: action.newPostText,\r\n            likesCount: 0\r\n        };\r\n            return {\r\n                ...state,\r\n                posts:[...state.posts,newPost],\r\n                newPostText:' '\r\n            };\r\n        case SET_USER_PROFILE:{\r\n            return{...state, profile: action.profile}\r\n        }\r\n        case SET_USER_CONTACTS:{\r\n            return{...state,contacts: action.contacts}\r\n        }\r\n        case SET_STATUS:{\r\n            return{...state, status:action.status}\r\n        }\r\n        case DELETE_POST:{\r\n            return{...state,posts:state.posts.filter(p => p.id != action.postId)}\r\n        }\r\n        default: \r\n            return state;\r\n    }\r\n}\r\nexport const addUserContacts = (contacts) => ({type:SET_USER_CONTACTS, contacts})\r\nexport const addPostActionCreator = (newPostText) => ({type: ADD_POST, newPostText})\r\nexport const setUserProfile = (profile) => ({type: SET_USER_PROFILE, profile})\r\nexport const setStatus = (status) => ({type: SET_STATUS, status})\r\nexport const deletePost = (postId) => ({type: DELETE_POST, postId})\r\n\r\nexport const getUserProfile = (userId) => async (dispatch) => {\r\n    let response = await usersAPI.getProfile(userId);\r\n    dispatch(setUserProfile(response.data));\r\n}\r\nexport const getStatus = (userId) => (dispatch) => {\r\n    profileAPI.getStatus(userId);\r\n        dispatch(setStatus(response.data));\r\n    \r\n}\r\nexport const updateStatus = (status) => (dispatch) => {\r\n    profileAPI.updateStatus(status).then(response => {\r\n        if (response.data.resultCode === 0){\r\n        dispatch(setStatus(status));\r\n    }});\r\n}\r\n\r\nexport default profileReducer;"]},"metadata":{},"sourceType":"module"}